Token At 1:1 < Identifier, const >
Token At 1:6 < Keyword, int >
Token At 1:9 < Identifier, MOD >
Token At 1:12 < Operator, = >
Token At 1:13 < Integer Literal, 1000000007 >
Token At 1:23 < Delimiter, ; >
Token At 2:1 < Identifier, const >
Token At 2:6 < Keyword, int >
Token At 2:9 < Identifier, MAX_N >
Token At 2:14 < Operator, = >
Token At 2:15 < Integer Literal, 200005 >
Token At 2:21 < Delimiter, ; >
Token At 4:1 < Keyword, int >
Token At 4:4 < Identifier, main >
Token At 4:8 < Delimiter, ( >
Token At 4:9 < Delimiter, ) >
Token At 4:10 < Delimiter, { >
Token At 6:5 < Keyword, int >
Token At 6:8 < Identifier, t >
Token At 6:9 < Delimiter, ; >
Token At 7:5 < Identifier, scanf >
Token At 7:10 < Delimiter, ( >
Token At 7:11 < String Literal, %d >
Token At 7:15 < Delimiter, , >
Token At 7:16 < Identifier, t >
Token At 7:17 < Delimiter, ) >
Token At 7:18 < Delimiter, ; >
Token At 8:5 < Keyword, while >
Token At 8:10 < Delimiter, ( >
Token At 8:11 < Identifier, t >
Token At 8:12 < Operator, -- >
Token At 8:14 < Delimiter, ) >
Token At 8:15 < Delimiter, { >
Token At 9:9 < Keyword, int >
Token At 9:12 < Identifier, n >
Token At 9:13 < Delimiter, , >
Token At 9:14 < Identifier, k >
Token At 9:15 < Delimiter, ; >
Token At 10:9 < Identifier, scanf >
Token At 10:14 < Delimiter, ( >
Token At 10:15 < String Literal, %d%d >
Token At 10:21 < Delimiter, , >
Token At 10:22 < Identifier, n >
Token At 10:23 < Delimiter, , >
Token At 10:24 < Identifier, k >
Token At 10:25 < Delimiter, ) >
Token At 10:26 < Delimiter, ; >
Token At 11:9 < Keyword, int >
Token At 11:12 < Identifier, arr >
Token At 11:15 < Delimiter, [ >
Token At 11:16 < Identifier, n >
Token At 11:17 < Delimiter, ] >
Token At 11:18 < Delimiter, ; >
Token At 12:9 < Keyword, int >
Token At 12:12 < Identifier, sum >
Token At 12:15 < Operator, = >
Token At 12:16 < Integer Literal, 0 >
Token At 12:17 < Delimiter, ; >
Token At 13:9 < Keyword, for >
Token At 13:12 < Delimiter, ( >
Token At 13:13 < Keyword, int >
Token At 13:16 < Identifier, i >
Token At 13:17 < Operator, = >
Token At 13:18 < Integer Literal, 0 >
Token At 13:19 < Delimiter, ; >
Token At 13:20 < Identifier, i >
Token At 13:21 < Operator, < >
Token At 13:22 < Identifier, n >
Token At 13:23 < Delimiter, ; >
Token At 13:24 < Identifier, i >
Token At 13:25 < Operator, ++ >
Token At 13:27 < Delimiter, ) >
Token At 13:28 < Delimiter, { >
Token At 14:13 < Identifier, scanf >
Token At 14:18 < Delimiter, ( >
Token At 14:19 < String Literal, %d >
Token At 14:23 < Delimiter, , >
Token At 14:24 < Identifier, arr >
Token At 14:27 < Delimiter, [ >
Token At 14:28 < Identifier, i >
Token At 14:29 < Delimiter, ] >
Token At 14:30 < Delimiter, ) >
Token At 15:13 < Identifier, sum >
Token At 15:16 < Operator, += >
Token At 15:18 < Identifier, arr >
Token At 15:21 < Delimiter, [ >
Token At 15:22 < Identifier, i >
Token At 15:23 < Delimiter, ] >
Token At 15:24 < Delimiter, ; >
Token At 16:9 < Delimiter, } >
Token At 17:9 < Keyword, int >
Token At 17:12 < Identifier, rinc >
Token At 17:16 < Operator, = >
Token At 17:17 < Integer Literal, 0 >
Token At 17:18 < Delimiter, ; >
Token At 18:9 < Keyword, for >
Token At 18:12 < Delimiter, ( >
Token At 18:13 < Keyword, int >
Token At 18:16 < Identifier, i >
Token At 18:17 < Operator, = >
Token At 18:18 < Identifier, n >
Token At 18:19 < Operator, - >
Token At 18:20 < Integer Literal, 1 >
Token At 18:21 < Delimiter, ; >
Token At 18:22 < Identifier, i >
Token At 18:23 < Operator, >= >
Token At 18:25 < Integer Literal, 1 >
Token At 18:26 < Delimiter, ; >
Token At 18:27 < Identifier, i >
Token At 18:28 < Operator, -- >
Token At 18:30 < Delimiter, ) >
Token At 18:31 < Delimiter, { >
Token At 19:13 < Identifier, sum >
Token At 19:16 < Operator, -= >
Token At 19:18 < Identifier, arr >
Token At 19:21 < Delimiter, [ >
Token At 19:22 < Identifier, i >
Token At 19:23 < Delimiter, ] >
Token At 19:24 < Delimiter, ; >
Token At 20:13 < Keyword, int >
Token At 20:16 < Identifier, p >
Token At 20:17 < Operator, = >
Token At 20:18 < Identifier, arr >
Token At 20:21 < Delimiter, [ >
Token At 20:22 < Identifier, i >
Token At 20:23 < Delimiter, ] >
Token At 20:24 < Operator, * >
Token At 20:25 < Floating Point Literal, 1 >
Token At 20:28 < Operator, / >
Token At 20:29 < Identifier, sum >
Token At 20:32 < Operator, * >
Token At 20:33 < Integer Literal, 100 >
Token At 20:36 < Delimiter, ; >
Token At 21:13 < Keyword, int >
Token At 21:16 < Identifier, at >
Token At 21:18 < Operator, = >
Token At 22:17 < Delimiter, ( >
Token At 22:18 < Integer Literal, 100 >
Token At 22:21 < Operator, * >
Token At 22:22 < Identifier, arr >
Token At 22:25 < Delimiter, [ >
Token At 22:26 < Identifier, i >
Token At 22:27 < Delimiter, ] >
Token At 22:28 < Operator, + >
Token At 22:29 < Identifier, k >
Token At 22:30 < Operator, - >
Token At 22:31 < Integer Literal, 1 >
Token At 22:32 < Delimiter, ) >
Token At 22:33 < Operator, / >
Token At 22:34 < Identifier, k >
Token At 22:35 < Delimiter, ; >
Token At 23:13 < Keyword, if >
Token At 23:15 < Delimiter, ( >
Token At 23:16 < Identifier, at >
Token At 23:18 < Operator, > >
Token At 23:19 < Identifier, sum >
Token At 23:22 < Delimiter, ) >
Token At 23:23 < Delimiter, { >
Token At 24:17 < Identifier, sum >
Token At 24:20 < Operator, = >
Token At 24:21 < Identifier, at >
Token At 24:23 < Delimiter, ; >
Token At 25:13 < Delimiter, } >
Token At 26:9 < Delimiter, } >
Token At 27:9 < Identifier, printf >
Token At 27:15 < Delimiter, ( >
Token At 27:16 < String Literal, %d
 >
Token At 27:22 < Delimiter, , >
Token At 27:23 < Identifier, sum >
Token At 27:26 < Operator, - >
Token At 27:27 < Identifier, arr >
Token At 27:30 < Delimiter, [ >
Token At 27:31 < Integer Literal, 0 >
Token At 27:32 < Delimiter, ] >
Token At 27:33 < Delimiter, ) >
Token At 27:34 < Delimiter, ; >
Token At 28:5 < Delimiter, } >
Token At 30:5 < Keyword, return >
Token At 30:11 < Integer Literal, 0 >
Token At 30:12 < Delimiter, ; >
Token At 31:1 < Delimiter, } >
